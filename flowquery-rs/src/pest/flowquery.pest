// Grammar for FlowQuery language using pest syntax

// Whitespace and comments (ignored)
WHITESPACE = _{ " " | "\t" | "\n" | "\r" }
COMMENT = _{ "//" ~ (!"\n" ~ ANY)* ~ ("\n" | EOI) }

// Main entry point: a FlowQuery pipeline
query = { SOI ~ pipeline ~ EOI }
pipeline = { source ~ (pipe_transform | side_effect_transform)* }
pipe_transform = { "|>" ~ transform }
side_effect_transform = { "|:" ~ transform }

// Source: either a simple table or a merge operation
source = { table_ref | merge }
table_ref = { ident ~ ("as" ~ ident)? }
merge = { "merge" ~ "(" ~ table_ref ~ ("," ~ table_ref)* ~ "," ~ "on" ~ ":" ~ condition ~ ")" }

// Transformations
transform = {
    select
  | filter
  | group
  | cache
  | invalidate
  | order
  | update
}

// Transformation rules
select = { "select" ~ "(" ~ select_item ~ ("," ~ select_item)* ~ ")" }
select_item = { (ident ~ "." ~ ident | ident) | (ident ~ ":" ~ expr) }  // e.g., t1.col or alias: expr

filter = { "filter" ~ "(" ~ condition ~ ")" }

group = { "group" ~ "(" ~ ident ~ ("," ~ ident)* ~ ")" }

cache = { "cache" ~ "(" ~ "key" ~ "=" ~ expr ~ "," ~ "value" ~ "=" ~ expr ~ ")" }

invalidate = { "invalidate" ~ "(" ~ "key" ~ "=" ~ expr ~ ")" }

order = { "order" ~ "(" ~ order_item ~ ("," ~ order_item)* ~ ")" }
order_item = { ident ~ ("asc" | "desc")? }

update = { "update" ~ "(" ~ update_item ~ ("," ~ update_item)* ~ ")" }
update_item = { ident ~ "," ~ expr }

// Expressions (for conditions, cache keys/values, etc.)
expr = { binary_expr | term }
binary_expr = { term ~ binary_op ~ term }
binary_op = { "+" | "-" | "=" | ">" | ">=" | "<" | "<=" | "!=" | "and" | "or" }
term = { ident | string | number | "(" ~ expr ~ ")" }

// Conditions (used in filter and merge)
condition = { binary_expr }

// Basic tokens
ident = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }  // e.g., table1, column_foo
string = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }             // e.g., "value"
number = @{ ASCII_DIGIT+ }                             // e.g., 123